import torch
from datasets import load_from_disk
from transformers import BertTokenizer
from datasets import load_dataset
#定义数据集

class Dataset():
    def __init__(self,str):
        self.dataset = load_dataset(path='json',data_files='../data/ChnSentiCorp/train/'+str+'.json',split='train')
        lens = len(self.dataset)
        new_column = [1 for i in range(lens)]
        self.dataset = self.dataset.add_column('label',new_column)

    def __len__(self):
        return len(self.dataset)

    def __getitem__(self, i):
        text = self.dataset[i]['text']
        label = self.dataset[i]['label']

        return text, label

from transformers import BertModel

#加载预训练模型
pretrained = BertModel.from_pretrained('bert-base-chinese')     #通过name加载网络上的与训练模型，并且缓存到cache中

for param in pretrained.parameters():
    param.requires_grad_(False)


#加载字典和分词工具
token = BertTokenizer.from_pretrained('bert-base-chinese')      #加载预分词器
def collate_fn(data):
    sents = [i[0] for i in data]
    labels = [i[1] for i in data]

    #编码---使用自带的批量成对编码
    data = token.batch_encode_plus(batch_text_or_text_pairs=sents,      #传递数据的格式有所变化
                                   truncation=True,         #达到最大长度后截断
                                   #达到最大长度后截断
                                   padding='max_length',
                                   max_length=500,
                                   #返回pytorch类型，默认是返回list
                                   return_tensors='pt',
                                   #返回length，标识长度
                                   return_length=True)
    #将分词后的结果取出来
    #input_ids:编码之后的数字
    #attention_mask:是补零的位置是0,其他位置是1
    input_ids = data['input_ids']
    attention_mask = data['attention_mask']
    token_type_ids = data['token_type_ids']
    labels = torch.LongTensor(labels)
    return input_ids, attention_mask, token_type_ids, labels

class Model(torch.nn.Module):
    def __init__(self):
        super().__init__()
        #第一层
        self.fc1 = torch.nn.Linear(768, 60)       #三层全连接层
        self.relu1 = torch.nn.ReLU()
        #第二层
        self.fc2 = torch.nn.Linear(60, 30)
        self.relu2 = torch.nn.ReLU()
        #第三层
        self.fc3 = torch.nn.Linear(30, 2)
    def forward(self, input_ids, attention_mask, token_type_ids):
        with torch.no_grad():       #该方法表示当前计算不需要反向传播
            out = pretrained(input_ids=input_ids,
                       attention_mask=attention_mask,
                       token_type_ids=token_type_ids)
        out = self.fc1(out.last_hidden_state[:, 0])      #将预训练模型抽取数据中的特征（情感分类只取第0个词的特征）交给全连接层计算
        out = self.relu1(out)
        out = self.fc2(out)
        out = self.relu2(out)
        out = self.fc3(out)
        out = out.softmax(dim=1)        #指定第1个维度的和为1
        return out          #torch(32,1)

modela = Model()
modela.load_state_dict(torch.load('./model/3-DNN_model.pth'))

class predo():
    global names
    def __init__(self,name):
        self.name = name
        dataset = Dataset(name)
        modela.eval()    #把dropout和BN层置为验证模式。
        correct = 0
        global total
        total = 0
        global output_test     #模型判断出来的情感度
        output_test = 0
        actual_test = 0     
        loader_test = torch.utils.data.DataLoader(dataset=dataset,
                                                  batch_size=64,        #每一次测试的批量大小是32
                                                  collate_fn=collate_fn,
                                                  shuffle=True,
                                                  drop_last=True)
        for i, (input_ids, attention_mask, token_type_ids,
                labels) in enumerate(loader_test):
            if i == 1:
                break
            with torch.no_grad():
                out = modela(input_ids=input_ids,
                            attention_mask=attention_mask,
                            token_type_ids=token_type_ids)      #测试也是通过与训练模型提取特征
            out = out.argmax(dim=1)     #返回指定维度最大值的序号  0 or 1 ，即最终分析的句子是正面的还是反面的
            correct += (out == labels).sum().item()#对比后相同的值会为True，不同则会为False #.sum()将所有的True值相加，得到的仍是tensor类别的int值 #.item()转成python数字
            output_test += (out).sum().item()
            actual_test += (labels).sum().item()
            total += len(labels)

    def get_positive(self):
        return output_test / total

